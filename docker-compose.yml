services:
  postgres:
    build:
      context: .
      dockerfile: postgres.Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-markersdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432" # Only accessible from the host machine
    networks:
      - marker-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U postgres && psql -U postgres -d postgres -c 'SELECT 1 FROM pg_database WHERE datname = '\\''markersdb'\\'''",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # Only include Adminer in development environments
  # adminer:
  #   image: adminer:latest
  #   ports:
  #     - "127.0.0.1:8080:8080"  # Only accessible from the host machine
  #   networks:
  #     - marker-network
  #   depends_on:
  #     - postgres
  #   security_opt:
  #     - no-new-privileges:true
  #   restart: unless-stopped
  #   profiles:
  #     - dev

  redis:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:6379:6379" # Only accessible from the host machine
    volumes:
      - redis_data:/data
    networks:
      - marker-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--bind", "0.0.0.0"]
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    environment:
      - PORT=3000
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-markersdb}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-markersdb}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MAPBOX_GEOCODING_TOKEN=${MAPBOX_GEOCODING_TOKEN}
      - GOOGLE_GEOCODING_API_KEY=${GOOGLE_GEOCODING_API_KEY}
      # Image storage configuration
      - ENABLE_IMAGE_STORAGE=${ENABLE_IMAGE_STORAGE:-false}
      - DO_SPACE_ENDPOINT=${DO_SPACE_ENDPOINT:-https://nyc3.digitaloceanspaces.com}
      - DO_SPACE_REGION=${DO_SPACE_REGION:-nyc3}
      - DO_SPACE_BUCKET=${DO_SPACE_BUCKET:-event-images}
      - DO_SPACE_ACCESS_KEY=${DO_SPACE_ACCESS_KEY}
      - DO_SPACE_SECRET_KEY=${DO_SPACE_SECRET_KEY}
      - DO_SPACE_PUBLIC_URL=${DO_SPACE_PUBLIC_URL:-https://nyc3.digitaloceanspaces.com}

    ports:
      - "127.0.0.1:3000:3000" # Only expose to the host for Nginx
    networks:
      - marker-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - backend_node_modules:/app/node_modules
      - backend_app_node_modules:/app/apps/backend/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: apps/backend/worker.Dockerfile
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-markersdb}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-markersdb}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MAPBOX_GEOCODING_TOKEN=${MAPBOX_GEOCODING_TOKEN}
      - GOOGLE_GEOCODING_API_KEY=${GOOGLE_GEOCODING_API_KEY}
      - ENABLE_IMAGE_STORAGE=${ENABLE_IMAGE_STORAGE:-false}
      - DO_SPACE_ENDPOINT=${DO_SPACE_ENDPOINT:-https://nyc3.digitaloceanspaces.com}
      - DO_SPACE_REGION=${DO_SPACE_REGION:-nyc3}
      - DO_SPACE_BUCKET=${DO_SPACE_BUCKET:-event-images}
      - DO_SPACE_ACCESS_KEY=${DO_SPACE_ACCESS_KEY}
      - DO_SPACE_SECRET_KEY=${DO_SPACE_SECRET_KEY}
      - DO_SPACE_PUBLIC_URL=${DO_SPACE_PUBLIC_URL:-https://nyc3.digitaloceanspaces.com}
    networks:
      - marker-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    volumes:
      - worker_node_modules:/app/apps/backend/node_modules
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # New Filter Processor Service
  filter-processor:
    build:
      context: .
      dockerfile: apps/filter-processor/Dockerfile
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-markersdb}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-markersdb}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - NODE_ENV=production
      - HEALTH_PORT=8082
    ports:
      - "127.0.0.1:8082:8082" # Expose health check port to host for debugging
    networks:
      - marker-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - filter_processor_node_modules:/app/apps/filter-processor/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  websocket:
    build:
      context: .
      dockerfile: apps/websocket/Dockerfile
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BACKEND_URL=http://backend:3000
    ports:
      - "127.0.0.1:8081:8081" # Only expose to the host for Nginx
    networks:
      - marker-network
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
      filter-processor:
        condition: service_healthy
    volumes:
      - websocket_node_modules:/app/apps/websocket/node_modules
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # Removed the nginx container since we're using the host's nginx

networks:
  marker-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_node_modules:
  backend_app_node_modules:
  worker_node_modules:
  websocket_node_modules:
  filter_processor_node_modules:
