services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=0.0.0.0:80"
      - "--entrypoints.websecure.address=0.0.0.0:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
    networks:
      - marker-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/api/rawdata",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    build:
      context: .
      dockerfile: postgres.Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-markersdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Remove port exposure - only accessible via internal network
    # ports:
    #   - "127.0.0.1:5432:5432"
    networks:
      - marker-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U postgres && psql -U postgres -d postgres -c 'SELECT 1 FROM pg_database WHERE datname = '\\''markersdb'\\'''",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

    restart: unless-stopped

  adminer:
    image: adminer:latest
    # Remove port exposure - only accessible via Traefik
    # ports:
    #   - "127.0.0.1:8080:8080"
    networks:
      - marker-network
    depends_on:
      - postgres

    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`${ADMINER_HOST}`)"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
      - "traefik.http.routers.adminer.tls.certresolver=letsencrypt"

  redis:
    image: redis:7-alpine
    # Remove port exposure - only accessible via internal network
    # ports:
    #   - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - marker-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    command:
      [
        "redis-server",
        "--requirepass",
        "${REDIS_PASSWORD}",
        "--bind",
        "0.0.0.0",
      ]

    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    environment:
      - PORT=3000
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-markersdb}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-markersdb}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MAPBOX_GEOCODING_TOKEN=${MAPBOX_GEOCODING_TOKEN}
      - GOOGLE_GEOCODING_API_KEY=${GOOGLE_GEOCODING_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_SECRET=${REFRESH_SECRET}
      # OAuth Credentials
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_IOS_CLIENT_ID=${GOOGLE_IOS_CLIENT_ID}
      - GOOGLE_ANDROID_CLIENT_ID=${GOOGLE_ANDROID_CLIENT_ID}
      - FACEBOOK_CLIENT_ID=${FACEBOOK_CLIENT_ID}
      - FACEBOOK_CLIENT_SECRET=${FACEBOOK_CLIENT_SECRET}
      # Stripe configuration
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PRICE_ID=${STRIPE_PRICE_ID}
      # Image storage configuration
      - ENABLE_IMAGE_STORAGE=${ENABLE_IMAGE_STORAGE:-false}
      - DO_SPACE_ENDPOINT=${DO_SPACE_ENDPOINT:-https://nyc3.digitaloceanspaces.com}
      - DO_SPACE_REGION=${DO_SPACE_REGION:-nyc3}
      - DO_SPACE_BUCKET=${DO_SPACE_BUCKET:-event-images}
      - DO_SPACE_ACCESS_KEY=${DO_SPACE_ACCESS_KEY}
      - DO_SPACE_SECRET_KEY=${DO_SPACE_SECRET_KEY}
      - DO_SPACE_PUBLIC_URL=${DO_SPACE_PUBLIC_URL:-https://nyc3.digitaloceanspaces.com}

    # Remove port exposure - only accessible via Traefik
    # ports:
    #   - "127.0.0.1:3000:3000"
    networks:
      - marker-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes: []
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 30s

    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${API_HOST}`)"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.backend.middlewares=backend-headers"
      - "traefik.http.middlewares.backend-headers.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.backend-headers.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.backend-headers.headers.accesscontrolallowheaders=*"

  worker:
    build:
      context: .
      dockerfile: apps/backend/worker.Dockerfile
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-markersdb}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-markersdb}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_SECRET=${REFRESH_SECRET}
      # OAuth Credentials
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_IOS_CLIENT_ID=${GOOGLE_IOS_CLIENT_ID}
      - GOOGLE_ANDROID_CLIENT_ID=${GOOGLE_ANDROID_CLIENT_ID}
      - FACEBOOK_CLIENT_ID=${FACEBOOK_CLIENT_ID}
      - FACEBOOK_CLIENT_SECRET=${FACEBOOK_CLIENT_SECRET}
      - MAPBOX_GEOCODING_TOKEN=${MAPBOX_GEOCODING_TOKEN}
      - GOOGLE_GEOCODING_API_KEY=${GOOGLE_GEOCODING_API_KEY}
      - ENABLE_IMAGE_STORAGE=${ENABLE_IMAGE_STORAGE:-false}
      - DO_SPACE_ENDPOINT=${DO_SPACE_ENDPOINT:-https://nyc3.digitaloceanspaces.com}
      - DO_SPACE_REGION=${DO_SPACE_REGION:-nyc3}
      - DO_SPACE_BUCKET=${DO_SPACE_BUCKET:-event-images}
      - DO_SPACE_ACCESS_KEY=${DO_SPACE_ACCESS_KEY}
      - DO_SPACE_SECRET_KEY=${DO_SPACE_SECRET_KEY}
      - DO_SPACE_PUBLIC_URL=${DO_SPACE_PUBLIC_URL:-https://nyc3.digitaloceanspaces.com}
    networks:
      - marker-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    volumes: []

    restart: unless-stopped

  # New Filter Processor Service
  filter-processor:
    build:
      context: .
      dockerfile: apps/filter-processor/Dockerfile
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-markersdb}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-markersdb}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - NODE_ENV=production
      - HEALTH_PORT=8082
      - BACKEND_URL=http://backend:3000
    # Remove port exposure - only accessible via Traefik
    # ports:
    #   - "127.0.0.1:8082:8082"
    networks:
      - marker-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      backend:
        condition: service_healthy
    volumes: []
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8082/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.filter-processor.rule=Host(`${FILTER_PROCESSOR_HOST}`)"
      - "traefik.http.services.filter-processor.loadbalancer.server.port=8082"
      - "traefik.http.routers.filter-processor.tls.certresolver=letsencrypt"

  websocket:
    build:
      context: .
      dockerfile: apps/websocket/Dockerfile
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BACKEND_URL=http://backend:3000
    # Remove port exposure - only accessible via Traefik
    # ports:
    #   - "127.0.0.1:8081:8081"
    networks:
      - marker-network
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
      filter-processor:
        condition: service_healthy
    volumes: []
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.websocket.rule=Host(`${WEBSOCKET_HOST}`)"
      - "traefik.http.services.websocket.loadbalancer.server.port=8081"
      - "traefik.http.routers.websocket.tls.certresolver=letsencrypt"
      - "traefik.http.routers.websocket.middlewares=websocket-headers"
      - "traefik.http.middlewares.websocket-headers.headers.accesscontrolallowmethods=GET,POST,OPTIONS"
      - "traefik.http.middlewares.websocket-headers.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.websocket-headers.headers.accesscontrolallowheaders=*"

  # Web Dashboard Service with Environment-based Build Selection
  web-dashboard:
    build:
      context: .
      dockerfile: ${WEB_DASHBOARD_DOCKERFILE:-apps/web-dashboard/Dockerfile}
    environment:
      - NODE_ENV=${WEB_DASHBOARD_NODE_ENV:-production}
      - PORT=3001
    # Remove port exposure - only accessible via Traefik
    # ports:
    #   - "127.0.0.1:3001:3001"
    networks:
      - marker-network
    volumes:
      - web_dashboard_next_cache:/app/apps/web-dashboard/.next
    working_dir: /app/apps/web-dashboard
    command: ${WEB_DASHBOARD_COMMAND:-pnpm start}

    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${DASHBOARD_HOST}`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=3001"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"

networks:
  marker-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  web_dashboard_next_cache:
  traefik-certificates:
